import c_init(real, name) as init;
import c_init_df(value, name) as df_init;
import c_print(value) as print;
import c_iprint(int) as iprint;
import c_set_k(name, value, value) as set_k;
import c_calculate(name, value, value, value) as calculate;
import c_set(name, value) as set;
import c_i_j_print(int, int, value) as i_j_print;
import c_println() as println;

sub pr_ln() {
    println();
}

sub print_res(name src_matrix, int N) {
    for i = 0..(N - 1) {
        for j = 0..(N - 1) {
            i_j_print(i, j, src_matrix[i][j]);
        }
    }
}

sub calc_K(name K, name src_matrix, int i, int j, int N) {
    set_k(K[i][j], src_matrix[i][j], src_matrix[j][j]);
}

sub gauss_method(name src_matrix, int N) {
    df K, copy; 

    for j = 0..(N - 1) {
        for i = (j + 1)..(N - 1) {
//            calc_K(K, src_matrix, i, j, N);

            set_k(K[i][j], 
                src_matrix[i][j], 
                src_matrix[j][j]);

            for k = 0..(N - 1) {

                // сохраним копию src_matrix[i][k] и удалим src_matrix[i][k] 
                // чтобы мы могли что-то присвоит этому ФД в дальнешем
                df_init(src_matrix[i][k], copy) @ {delete src_matrix[i][k];};

                // a[i][k] -> a[i][k] - K[i][j] * a[j][k]
                calculate(src_matrix[i][k],
                        copy, 
                        src_matrix[j][k],
                        K[i][j]) @ {delete copy;};

//                i_j_print(i, k, src_matrix[i][k]);
            } 
        }
    }
    print_res(src_matrix, N);
}

sub main() {
    df matrix;

    init(1.0, matrix[0][0]);
    init(2.0, matrix[0][1]);
    init(3.0, matrix[0][2]);

    init(4.0, matrix[1][0]);
    init(5.0, matrix[1][1]);
    init(6.0, matrix[1][2]);

    init(7.0, matrix[2][0]);
    init(8.0, matrix[2][1]);
    init(9.0, matrix[2][2]);

    gauss_method(matrix, 3);
}








//        init(1.0, matrix[0][0]);
//        init(2.0, matrix[0][1]);
//        init(3.0, matrix[1][0]);
//        init(4.0, matrix[1][1]);

//    init(1.0, matrix[0][0]);
//    init(2.0, matrix[0][1]);
//    init(3.0, matrix[0][2]);
//    init(4.0, matrix[0][3]);

//    init(5.0, matrix[1][0]);
//    init(6.0, matrix[1][1]);
//    init(7.0, matrix[1][2]);
//    init(8.0, matrix[1][3]);
//
//    init(9.0,  matrix[2][0]);
//    init(10.0, matrix[2][1]);
//    init(11.0, matrix[2][2]);
//    init(12.0, matrix[2][3]);
//
//    init(13.0, matrix[3][0]);
//    init(14.0, matrix[3][1]);
//    init(15.0, matrix[3][2]);
//    init(16.0, matrix[3][3]);
//
