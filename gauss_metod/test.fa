import c_init(real, name) as init;
import c_init_df(value, name) as df_init;
import c_print(value) as print;
import c_i_j_print(int, int, int, value) as i_j_print;
import c_i_j_k(int, int, int) as i_j_k;

sub print_res(name A, int N, int gen) {
    for i = 0..(N - 1) {
        for j = 0..(N - 1) {
            i_j_print(i, j, gen, A[gen][i][j]);
        }
    }
}

sub copy(name A, int N, int cur_gen) {
    for i = 0..(cur_gen - 1) {
        for j = 0..(N - 1) {
            df_init(A[cur_gen - 1][i][j], A[cur_gen][i][j]);
        }
    }
}

sub gauss_method(name A, int N) {
    for j = 0..(N - 1) {
        copy(A, N, j + 1); 

        for i = (j + 1)..(N - 1) {

            // изменяем строчку
            for k = 0..(N - 1) {

                // a[cur_gen][i][k] -> a[prev_gen][i][k] - K[i][j] * a[prev_gen][j][k]
                df_init(A[j][i][k] - A[j][i][j] / A[j][j][j] * A[j][j][k] ,
                        A[j + 1][i][k]);
            } 
        }
    }
    print_res(A, N, N - 1);
}

sub main() {
    df matrix;

    init(1.0, matrix[0][0][0]);
    init(2.0, matrix[0][0][1]);
    init(3.0, matrix[0][0][2]);
    init(4.0, matrix[0][0][3]);

    init(1.0, matrix[0][1][0]);
    init(4.0, matrix[0][1][1]);
    init(7.0, matrix[0][1][2]);
    init(8.0, matrix[0][1][3]);

    init(2.0, matrix[0][2][0]);
    init(4.0, matrix[0][2][1]);
    init(7.0, matrix[0][2][2]);
    init(9.0, matrix[0][2][3]);

    init(1.0, matrix[0][3][0]);
    init(2.0, matrix[0][3][1]);
    init(3.0, matrix[0][3][2]);
    init(7.0, matrix[0][3][3]);

    gauss_method(matrix, 4); // 2x2 - good, 3x3 - good, 4x4 - error
}

//    init(1.0, matrix[0][0][0]);
//    init(2.0, matrix[0][0][1]);
//    init(3.0, matrix[0][1][0]);
//    init(4.0, matrix[0][1][1]);
//
//    init(1.0, matrix[0][0][0]);
//    init(2.0, matrix[0][0][1]);
//    init(3.0, matrix[0][0][2]);
//
//    init(4.0, matrix[0][1][0]);
//    init(5.0, matrix[0][1][1]);
//    init(6.0, matrix[0][1][2]);
//
//    init(7.0, matrix[0][2][0]);
//    init(8.0, matrix[0][2][1]);
//    init(9.0, matrix[0][2][2]);

//    init(1.0, matrix[0][0][0]);
//    init(2.0, matrix[0][0][1]);
//    init(3.0, matrix[0][1][0]);
//    init(4.0, matrix[0][1][1]);
